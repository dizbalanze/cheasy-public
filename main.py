import my_config
import my_db
import my_open_ai
import my_robokassa
import my_query
import my_robokassa_db
import my_handle
import telebot
from telebot import types
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Bot, BotCommand, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler

bot_token = my_config.bot_token
tg_bot = telebot.TeleBot(bot_token)


def is_user_subscribed(chat_id, user_id):
    try: return tg_bot.get_chat_member(chat_id, user_id).status in ['member', 'administrator', 'creator']
    except telebot.apihelper.ApiException: return False


def handle_message(update, context):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    if my_db.get_user_message_limit(user_id) == 0: my_db.set_user_message_limit(user_id, 25)

    if context.user_data.get('awaiting_review', False):
        my_db.save_user_review(user_id, user_message)
        keyboard = [[InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å GPT', callback_data = 'gogpt')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ‚ù§Ô∏è', reply_markup = reply_markup)
        context.user_data['awaiting_review'] = False

    elif not is_user_subscribed(my_config.channel_id, user_id):
        start = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –≤–∏–∂—É, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ò–≤–∞–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {my_config.chat_link} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è‚úÖ", –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã)'
        keyboard = [[InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞–ª—Å—è‚úÖ', callback_data = 'i_reg')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(start, reply_markup = reply_markup)

    elif my_db.get_user_message_limit(user_id) <= my_db.count_all_messages(user_id):
        start = '''–£—É—É–ø—Å, –≤–∏–∂—É, —á—Ç–æ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã.\n\nüí∞ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Ö –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º <b>–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞</b> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <b>–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.</b>'''
        keyboard = [[InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data = 'payment')],
                    [InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data = 'friend')], ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(start, reply_markup = reply_markup, parse_mode='HTML')

    elif len(user_message) > 4000:
        update.message.reply_text('ERROR: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∞')

    else: process_user_message(user_id, user_message, update, context)


def process_user_message(user_id, user_message, update, context):
    my_db.add_message_to_db(user_id, user_message, "user")
    mess = my_db.get_user_messages(user_id)
    total_length = 0

    i = len(mess) - 1
    while total_length < 6000 and i > 0:
        total_length += len(mess[i]['content'])
        i -= 1

    mess = mess[i:]

    temp_message = update.message.reply_text('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3-—Ö –º–∏–Ω—É—Ç...')
    temp_message_id = temp_message.message_id

    response = my_open_ai.create_completion(mess)
    my_db.add_message_to_db(user_id, response, "assistant")

    update.message.reply_text(response)
    context.bot.delete_message(chat_id=user_id, message_id=temp_message_id)


this_commands = [('start', my_handle.handle_start_command),
                 ('gpt', my_handle.handle_gogpt_command),
                 ('balance', my_handle.handle_balance_command),
                 ('referal', my_handle.handle_referal_command),
                 ('rating', my_handle.handle_rating_command),
                 ('offer', my_handle.handle_offer_command),
                 ('present', my_handle.handle_present_command),]

menu_commands = [('gpt', '–î–∏–∞–ª–æ–≥ —Å –ù–µ–π—Ä–æ—Å–µ—Ç—å—é'),
                 ('balance', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'),
                 ('referal', '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'),
                 ('rating', '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')]

this_buttons = [(my_query.handle_rating_response, '^rate_[1-5]$'),
                (my_query.handle_buy, '^buy_\\d+$'),
                (my_query.handle_check, '^check_\\d+$'),
                (my_query.handle_payment, 'payment'),
                (my_query.handle_friend,'friend'),
                (my_query.handle_mykey, 'mykey'),
                (my_query.handle_gogpt, 'gogpt'),
                (my_query.handle_dialog, '^page_[2-3]$'),]


def main():
    updater = Updater(token=bot_token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(ConversationHandler(entry_points=[CallbackQueryHandler(my_query.handle_refkey, pattern='refkey')],
        states={0: [MessageHandler(Filters.text & ~Filters.command, my_query.handle_invitation_code)],},
        fallbacks=[]))

    for command, handler in this_commands:
        dp.add_handler(CommandHandler(command, handler))

    for function, pattern in this_buttons:
        dp.add_handler(CallbackQueryHandler(function, pattern = pattern))

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    my_db.create_db()
    my_robokassa_db.create_database()
    Bot(bot_token).set_my_commands([BotCommand(command, description) for command, description in menu_commands])
    main()